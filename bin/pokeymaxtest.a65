; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/12/08] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0206

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	MOVE_0242					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000027  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	POKEYMAXCONF					; UNIT

.local	DETECTPOKEYMAX					; FUNCTION

; optimize OK (POKEYMAXCONF), line = 407

?volatile:
	ldy #1
	lda PMCID
	cmp #$01
	beq @+
	dey
@
	tya
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C
	rts						; ret
.endl

.local	CONFIGMODE					; PROCEDURE
	sta STATE

; optimize OK (POKEYMAXCONF), line = 417

	sta @CASETMP_0003
	cmp #$01
	jne l_0296
@

; optimize OK (POKEYMAXCONF), line = 418

	lda #$3F
	sta PMCCONFIG

	jmp a_0003
l_0296
	cmp #$00
	jne l_02A3
@

; optimize OK (POKEYMAXCONF), line = 419

	lda #$00
	sta PMCCONFIG

l_02A3
a_0003

; ------------------------------------------------------------

STATE	= DATAORIGIN+$000D
@CASETMP_0003	= DATAORIGIN+$000E

@VarData	= STATE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETVERSION					; FUNCTION

; optimize OK (POKEYMAXCONF), line = 428

	lda #$01
	jsr CONFIGMODE

; optimize OK (POKEYMAXCONF), line = 429

	mwy RESULT :bp2
	ldy #$00
	lda #$08
	sta (:bp2),y

; optimize OK (POKEYMAXCONF), line = 430

	lda #$01
	sta I

l_02C1
; --- ForToDoCondition
	lda I
	cmp #$09
	jcs l_02CF

; optimize OK (POKEYMAXCONF), line = 432

	ldy I
	dey
	sty PMCVERSIONLOC

; optimize OK (POKEYMAXCONF), line = 433

?volatile:
	mwy RESULT :bp2
	ldy I
	lda PMCVERSION
	sta (:bp2),y

; --- ForToDoEpilog
	inc I
	jne l_02C1
l_02CF

; optimize OK (POKEYMAXCONF), line = 435

	lda #$00
	jsr CONFIGMODE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000F
I	= DATAORIGIN+$0011

@VarData	= I
@VarDataSize	= 1

	rts						; ret
.endl

.local	FETCHCONFIGURATION				; PROCEDURE

; optimize OK (POKEYMAXCONF), line = 440

	lda #$01
	jsr CONFIGMODE

; optimize OK (POKEYMAXCONF), line = 441

	lda LIFECONFIG
	sta SYSTEM.MOVE_0242.SOURCE
	lda LIFECONFIG+1
	sta SYSTEM.MOVE_0242.SOURCE+1
	lda _CONFIG
	sta SYSTEM.MOVE_0242.DEST
	lda _CONFIG+1
	sta SYSTEM.MOVE_0242.DEST+1
	lda #$10
	sta SYSTEM.MOVE_0242.COUNT
	lda #$00
	sta SYSTEM.MOVE_0242.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0242
	m@INLINE
	.endl

; optimize OK (POKEYMAXCONF), line = 442

	lda #$00
	jsr CONFIGMODE

; ------------------------------------------------------------

_CONFIG	= DATAORIGIN+$0012
_CONFIG.MODE	= DATAORIGIN+$0000
_CONFIG.CAPABILITY	= DATAORIGIN+$0001
_CONFIG.POSTDIVIDE	= DATAORIGIN+$0002
_CONFIG.GTIAEN	= DATAORIGIN+$0003
_CONFIG.VERSION	= DATAORIGIN+$0004
_CONFIG.PSGMODE	= DATAORIGIN+$0005
_CONFIG.SIDMODE	= DATAORIGIN+$0006
_CONFIG.RESTRICT	= DATAORIGIN+$0007
_CONFIG._RESERVED	= DATAORIGIN+$0008
_CONFIG._FLASH	= DATAORIGIN+$000B

@VarData	= _CONFIG
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

PMC_PAL	= $20
PMC_MONODET	= $10
PMC_IRQEN	= $08
PMC_CHANNELMODE	= $04
PMC_SATURATE	= $01
PMC_FLASH	= $40
PMC_SAMPLE	= $20
PMC_COVOX	= $10
PMC_PSG	= $08
PMC_SID	= $04
PMC_POKEYS	= $03
PMC_POKEY_MONO	= $00
PMC_POKEY_STEREO	= $01
PMC_POKEY_QUAD	= $02
PMC_POSTDIVCH0	= $03
PMC_POSTDIV0_1	= $00
PMC_POSTDIV0_2	= $01
PMC_POSTDIV0_4	= $02
PMC_POSTDIV0_8	= $03
PMC_POSTDIVCH1	= $0C
PMC_POSTDIV1_1	= $00
PMC_POSTDIV1_2	= $04
PMC_POSTDIV1_4	= $08
PMC_POSTDIV1_8	= $0C
PMC_POSTDIVCH2	= $30
PMC_POSTDIV2_1	= $00
PMC_POSTDIV2_2	= $10
PMC_POSTDIV2_4	= $20
PMC_POSTDIV2_8	= $30
PMC_POSTDIVCH3	= $C0
PMC_POSTDIV3_1	= $00
PMC_POSTDIV3_2	= $40
PMC_POSTDIV3_4	= $80
PMC_POSTDIV3_8	= $C0
PMC_GTIAEN	= $0F
PMC_GTIA0	= $01
PMC_GTIA1	= $02
PMC_GTIA2	= $04
PMC_GTIA3	= $08
PSG_VOLP	= $60
PSG_LOGVOL	= $00
PSG_LINVOL	= $1100000
PSG_ENV	= $10
PSG_ENV16	= $10
PSG_ENV32	= $00
PSG_STEREO	= $0C
PSG_MONO	= $00
PSG_ABBC	= $0100
PSG_ACBC	= $1000
PSG_CLCR	= $1100
PSG_FREQ	= $03
PSG_2MHZ	= $00
PSG_1MHZ	= $01
PSG_1_7MHZ	= $02
SID_1_CHIPTYPE	= $01
SID_2_CHIPTYPE	= $10
SID_1_DIGIFIX	= $02
SID_2_DIGIFIX	= $20
PMR_SAMPLE	= $10
PMR_PSG	= $08
PMR_SID	= $04
PMR_POKEYS	= $03
PMR_POKEY_MONO	= $00
PMR_POKEY_STERO	= $01
PMR_POKEY_QUAD	= $02
PMC_CFGEN	= $3F
FLASH_CFG	= $04
FLASH_FIRMWARE	= $00
FLASH_VALID	= $10000000
FLASH_REQ	= $02
FLASH_RW	= $01
FLASH_READ	= $01
FLASH_WRITE	= $00
FLASH_A14_16	= $38
FLASH_A6_13	= $FF
FLASH_A0_5	= $FC
FLASH_WIN	= $03
PMCID	= $D20C
PMCCONFIG	= $D20C
PMCVERSION	= $D214
PMCVERSIONLOC	= $D214
PMCFLASHOP	= $D21B
PMCFLASHADL	= $D21D
PMCFLASHADH	= $D21E
PMCFLASHDAT	= $D21F
adr.LIFECONFIG	= $D210
.var LIFECONFIG	= adr.LIFECONFIG .word
LIFECONFIG.MODE	= $D210
LIFECONFIG.CAPABILITY	= $D211
LIFECONFIG.POSTDIVIDE	= $D212
LIFECONFIG.GTIAEN	= $D213
LIFECONFIG.VERSION	= $D214
LIFECONFIG.PSGMODE	= $D215
LIFECONFIG.SIDMODE	= $D216
LIFECONFIG.RESTRICT	= $D217
adr.LIFECONFIG._RESERVED	= $D218
.var LIFECONFIG._RESERVED	= adr.LIFECONFIG._RESERVED .word
adr.LIFECONFIG._FLASH	= $D21A
.var LIFECONFIG._FLASH	= adr.LIFECONFIG._FLASH .word

.endl							; UNIT POKEYMAXCONF

.local	WAIT4KEY					; PROCEDURE

; optimize OK (pokeymaxtest.pas), line = 10

	lda #$FF
	sta KEYB

; --- RepeatUntilProlog
l_030C
	lda KEYB
	cmp #$FF
	jeq l_030C
	lda #$FF
	sta KEYB
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0206

; optimize FAIL ('POKEYMAXCONF.DETECTPOKEYMAX', pokeymaxtest.pas), line = 14

	jsr POKEYMAXCONF.DETECTPOKEYMAX
	lda POKEYMAXCONF.DETECTPOKEYMAX.RESULT
	jne l_032B

; optimize FAIL ('@print', pokeymaxtest.pas), line = 16

	@printSTRING #CODEORIGIN+$0000
	@printEOL

; optimize FAIL ('WAIT4KEY', pokeymaxtest.pas), line = 17

	jsr WAIT4KEY
	lda #$00
	jmp @halt
l_032B

; optimize FAIL ('POKEYMAXCONF.GETVERSION', pokeymaxtest.pas), line = 21

	jsr POKEYMAXCONF.GETVERSION
	inx
	lda POKEYMAXCONF.GETVERSION.RESULT
	sta @move.src
	lda POKEYMAXCONF.GETVERSION.RESULT+1
	sta @move.src+1
	@moveSTRING PMVER #9
	dex

; optimize FAIL ('@print', pokeymaxtest.pas), line = 22

	@printSTRING #CODEORIGIN+$001E
	@printSTRING PMVER
	@printEOL

; optimize OK (pokeymaxtest.pas), line = 23

	lda CONFIG
	sta POKEYMAXCONF.FETCHCONFIGURATION._CONFIG
	lda CONFIG+1
	sta POKEYMAXCONF.FETCHCONFIGURATION._CONFIG+1
	jsr POKEYMAXCONF.FETCHCONFIGURATION

; optimize FAIL ('@print', pokeymaxtest.pas), line = 24

	@printSTRING #CODEORIGIN+$002E
	@printEOL

; optimize OK (pokeymaxtest.pas), line = 25

	lda CONFIG.CAPABILITY
	and #$40
	jeq l_035A

; optimize FAIL ('@print', pokeymaxtest.pas), line = 26

	@printSTRING #CODEORIGIN+$003B
	@printEOL
l_035A

; optimize FAIL ('@print', pokeymaxtest.pas), line = 28

	@printSTRING #CODEORIGIN+$0067

; optimize OK (pokeymaxtest.pas), line = 29

	lda CONFIG.CAPABILITY
	and #$03
	sta @CASETMP_0004
	cmp #$00
	jne l_0372
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 30

	@printSTRING #CODEORIGIN+$0070
	@printEOL

	jmp a_0004
l_0372
	cmp #$01
	jne l_037E
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 31

	@printSTRING #CODEORIGIN+$0080
	@printEOL

	jmp a_0004
l_037E
	cmp #$02
	jne l_038A
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 32

	@printSTRING #CODEORIGIN+$0097
	@printEOL

l_038A
a_0004

; optimize OK (pokeymaxtest.pas), line = 35

	lda CONFIG.CAPABILITY
	and #$04
	jeq l_03AA

; optimize FAIL ('@print', pokeymaxtest.pas), line = 37

	@printSTRING #CODEORIGIN+$00B0
	@printEOL

; optimize FAIL ('@print', pokeymaxtest.pas), line = 38

	@printSTRING #CODEORIGIN+$00BF

; optimize OK (pokeymaxtest.pas), line = 39

	lda CONFIG.SIDMODE
	and #$01
	sta @CASETMP_0005
	cmp #$00
	jne l_03C0
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 40

	@printSTRING #CODEORIGIN+$00C6

	jmp a_0005
l_03C0

; optimize FAIL ('@print', pokeymaxtest.pas), line = 42

	@printSTRING #CODEORIGIN+$00DD
a_0005

; optimize OK (pokeymaxtest.pas), line = 44

	lda CONFIG.SIDMODE
	and #$02
	sta @CASETMP_0006
	cmp #$00
	jne l_03DA
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 45

	@printSTRING #CODEORIGIN+$00E4
	@printEOL

	jmp a_0006
l_03DA

; optimize FAIL ('@print', pokeymaxtest.pas), line = 47

	@printSTRING #CODEORIGIN+$00F5
	@printEOL
a_0006

; optimize FAIL ('@print', pokeymaxtest.pas), line = 49

	@printSTRING #CODEORIGIN+$0103

; optimize OK (pokeymaxtest.pas), line = 50

	lda CONFIG.SIDMODE
	and #$10
	sta @CASETMP_0007
	cmp #$00
	jne l_03F7
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 51

	@printSTRING #CODEORIGIN+$00C6

	jmp a_0007
l_03F7

; optimize FAIL ('@print', pokeymaxtest.pas), line = 53

	@printSTRING #CODEORIGIN+$00DD
a_0007

; optimize OK (pokeymaxtest.pas), line = 55

	lda CONFIG.SIDMODE
	and #$20
	sta @CASETMP_0008
	cmp #$00
	jne l_0411
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 56

	@printSTRING #CODEORIGIN+$00E4
	@printEOL

	jmp a_0008
l_0411

; optimize FAIL ('@print', pokeymaxtest.pas), line = 58

	@printSTRING #CODEORIGIN+$00F5
	@printEOL
a_0008
l_03AA

; optimize OK (pokeymaxtest.pas), line = 62

	lda CONFIG.CAPABILITY
	and #$08
	jeq l_0434

; optimize FAIL ('@print', pokeymaxtest.pas), line = 64

	@printSTRING #CODEORIGIN+$010A

; optimize OK (pokeymaxtest.pas), line = 65

	lda CONFIG.PSGMODE
	and #$03
	sta @CASETMP_0009
	cmp #$00
	jne l_0447
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 66

	@printSTRING #CODEORIGIN+$011A

	jmp a_0009
l_0447
	cmp #$01
	jne l_0453
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 67

	@printSTRING #CODEORIGIN+$0128

	jmp a_0009
l_0453
	cmp #$02
	jne l_045F
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 68

	@printSTRING #CODEORIGIN+$0136

l_045F
a_0009

; optimize FAIL ('@print', pokeymaxtest.pas), line = 70

	@printSTRING #CODEORIGIN+$0146
	@printEOL

; optimize OK (pokeymaxtest.pas), line = 71

	lda CONFIG.PSGMODE
	and #$60
	sta @CASETMP_000A
	cmp #$00
	jne l_047B
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 72

	@printSTRING #CODEORIGIN+$014D

	jmp a_000A
l_047B
	cmp #$00
	jne l_0487
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 73

	@printSTRING #CODEORIGIN+$015B

l_0487
a_000A

; optimize OK (pokeymaxtest.pas), line = 75

	lda CONFIG.PSGMODE
	and #$10
	sta @CASETMP_000B
	cmp #$10
	jne l_049F
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 76

	@printSTRING #CODEORIGIN+$016C

	jmp a_000B
l_049F
	cmp #$00
	jne l_04AB
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 77

	@printSTRING #CODEORIGIN+$0180

l_04AB
a_000B

; optimize OK (pokeymaxtest.pas), line = 79

	lda CONFIG.PSGMODE
	and #$0C
	sta @CASETMP_000C
	cmp #$00
	jne l_04C3
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 80

	@printSTRING #CODEORIGIN+$0194
	@printEOL

	jmp a_000C
l_04C3
	cmp #$00
	jne l_04CF
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 81

	@printSTRING #CODEORIGIN+$01A1
	@printEOL

	jmp a_000C
l_04CF
	cmp #$00
	jne l_04DB
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 82

	@printSTRING #CODEORIGIN+$01B1
	@printEOL

	jmp a_000C
l_04DB
	cmp #$00
	jne l_04E7
@

; optimize FAIL ('@print', pokeymaxtest.pas), line = 83

	@printSTRING #CODEORIGIN+$01C1
	@printEOL

l_04E7
a_000C
l_0434

; optimize OK (pokeymaxtest.pas), line = 86

	lda CONFIG.CAPABILITY
	and #$10
	jeq l_050A

; optimize FAIL ('@print', pokeymaxtest.pas), line = 87

	@printSTRING #CODEORIGIN+$01DA
	@printEOL
l_050A

; optimize OK (pokeymaxtest.pas), line = 88

	lda CONFIG.CAPABILITY
	and #$20
	jeq l_0526

; optimize FAIL ('@print', pokeymaxtest.pas), line = 89

	@printSTRING #CODEORIGIN+$01EB
	@printEOL
l_0526

; optimize FAIL ('WAIT4KEY', pokeymaxtest.pas), line = 91

	jsr WAIT4KEY

; ------------------------------------------------------------

adr.CONFIG	= DATAORIGIN+$0014	; [16] RECORD
.var CONFIG	= adr.CONFIG .word
CONFIG.MODE	= DATAORIGIN+$0014
CONFIG.CAPABILITY	= DATAORIGIN+$0015
CONFIG.POSTDIVIDE	= DATAORIGIN+$0016
CONFIG.GTIAEN	= DATAORIGIN+$0017
CONFIG.VERSION	= DATAORIGIN+$0018
CONFIG.PSGMODE	= DATAORIGIN+$0019
CONFIG.SIDMODE	= DATAORIGIN+$001A
CONFIG.RESTRICT	= DATAORIGIN+$001B
adr.CONFIG._RESERVED	= [DATAORIGIN+$001C] .array [3]
.var CONFIG._RESERVED	= adr.CONFIG._RESERVED .word
adr.CONFIG._FLASH	= [DATAORIGIN+$001F] .array [5]
.var CONFIG._FLASH	= adr.CONFIG._FLASH .word
adr.PMVER	= [DATAORIGIN+$0024] .array [9]
.var PMVER	= adr.PMVER .word
KEYB	= $02FC
@CASETMP_0004	= DATAORIGIN+$002D
@CASETMP_0005	= DATAORIGIN+$002E
@CASETMP_0006	= DATAORIGIN+$002F
@CASETMP_0007	= DATAORIGIN+$0030
@CASETMP_0008	= DATAORIGIN+$0031
@CASETMP_0009	= DATAORIGIN+$0032
@CASETMP_000A	= DATAORIGIN+$0033
@CASETMP_000B	= DATAORIGIN+$0034
@CASETMP_000C	= DATAORIGIN+$0035
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.POKEYMAXCONF.@UnitInit
	jsr MAIN.POKEYMAXCONF.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.POKEYMAXCONF) > 0
	.print 'POKEYMAXCONF: ',MAIN.POKEYMAXCONF,'..',MAIN.POKEYMAXCONF+.SIZEOF(MAIN.POKEYMAXCONF)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004,$00

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 54

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $1C $53 $6F $72 $72 $79 $2C $20  $50 $4F $4B $45 $59 $4D $61 $78  $20 $6E $6F $74 $20 $66 $6F $75
.by  $6E $64 $20 $3B $28 $00 $0E $50  $4F $4B $45 $59 $4D $61 $78 $20  $76 $65 $72 $3A $20 $00 $0B $43
.by  $61 $70 $61 $62 $69 $6C $69 $74  $79 $3A $00 $2A $50 $6F $73 $73  $69 $62 $6C $65 $20 $74 $6F $20
.by  $66 $6C $61 $73 $68 $20 $66 $69  $72 $6D $77 $61 $72 $65 $20 $26  $20 $63 $6F $6E $66 $69 $67 $75
.by  $72 $61 $74 $69 $6F $6E $00 $07  $50 $4F $4B $45 $59 $3A $20 $00  $0E $6D $6F $6E $6F $20 $28 $31
.by  $20 $50 $4F $4B $45 $59 $29 $00  $15 $73 $74 $65 $72 $65 $6F $20  $28 $32 $20 $50 $4F $4B $45 $59
.by  $73 $29 $20 $4C $2F $52 $00 $17  $71 $75 $61 $64 $20 $28 $34 $20  $50 $4F $4B $45 $59 $73 $29 $20
.by  $4C $2F $52 $2F $4C $2F $52 $00  $0D $32 $78 $53 $49 $44 $20 $73  $75 $70 $70 $6F $72 $74 $00 $05
.by  $20 $20 $23 $31 $20 $00 $15 $38  $35 $38 $30 $20 $28 $6C $69 $6E  $65 $61 $72 $20 $66 $69 $6C $74
.by  $65 $72 $29 $20 $00 $05 $36 $35  $38 $31 $20 $00 $0F $77 $69 $74  $68 $6F $75 $74 $20 $44 $49 $47
.by  $49 $46 $49 $58 $00 $0C $77 $69  $74 $68 $20 $44 $49 $47 $49 $46  $49 $58 $00 $05 $20 $20 $23 $32
.by  $20 $00 $0E $32 $78 $50 $53 $47  $20 $73 $75 $70 $70 $6F $72 $74  $20 $00 $0C $40 $32 $4D $48 $7A
.by  $20 $63 $6C $6F $63 $6B $20 $00  $0C $40 $31 $4D $48 $7A $20 $63  $6C $6F $63 $6B $20 $00 $0E $40
.by  $31 $2E $37 $4D $48 $7A $20 $63  $6C $6F $63 $6B $20 $00 $05 $77  $69 $74 $68 $3A $00 $0C $6C $6F
.by  $67 $20 $76 $6F $6C $75 $6D $65  $3B $20 $00 $0F $6C $69 $6E $65  $61 $72 $20 $76 $6F $6C $75 $6D
.by  $65 $3B $20 $00 $12 $31 $36 $20  $73 $74 $65 $70 $20 $65 $6E $76  $65 $6C $6F $70 $65 $3B $20 $00
.by  $12 $33 $32 $20 $73 $74 $65 $70  $20 $65 $6E $76 $65 $6C $6F $70  $65 $3B $20 $00 $0B $6D $6F $6E
.by  $6F $20 $6F $75 $74 $70 $75 $74  $00 $0E $41 $2B $42 $20 $42 $2B  $43 $20 $6F $75 $74 $70 $75 $74
.by  $00 $0E $41 $2B $43 $20 $42 $2B  $43 $20 $6F $75 $74 $70 $75 $74  $00 $17 $23 $31 $20 $74 $6F $20
.by  $6C $65 $66 $74 $2C $20 $23 $32  $20 $74 $6F $20 $72 $69 $67 $68  $74 $00 $0F $34 $78 $43 $4F $56
.by  $4F $58 $20 $73 $75 $70 $70 $6F  $72 $74 $00 $12 $44 $4D $41 $20  $73 $61 $6D $70 $6C $65 $20 $73
.by  $75 $70 $70 $6F $72 $74 $00
.endm

	end
